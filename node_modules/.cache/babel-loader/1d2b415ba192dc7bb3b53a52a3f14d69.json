{"ast":null,"code":"var _jsxFileName = \"/Users/z0041gm/school/DigitalSkillsAssessment/src/util/ResetPassword.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport queryString from 'query-string';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nfunction ResetPassword({\n  history\n}) {\n  const TokenStatus = {\n    Validating: 'Validating',\n    Valid: 'Valid',\n    Invalid: 'Invalid'\n  };\n  const [token, setToken] = useState(null);\n  const [tokenStatus, setTokenStatus] = useState(TokenStatus.Validating); // useEffect(() => {\n  //     const location = window.location;\n  //     const { token } = queryString.parse(location.search);\n  //\n  //     // remove token from url to prevent http referer leakage\n  //     history.replace(location.pathname);\n  //\n  //     accountService.validateResetToken(token)\n  //         .then(() => {\n  //             setToken(token);\n  //             setTokenStatus(TokenStatus.Valid);\n  //         })\n  //         .catch(() => {\n  //             setTokenStatus(TokenStatus.Invalid);\n  //         });\n  // }, []);\n\n  function getForm() {\n    const initialValues = {\n      password: '',\n      confirmPassword: ''\n    };\n    const validationSchema = Yup.object().shape({\n      password: Yup.string().min(6, 'Password must be at least 6 characters').required('Password is required'),\n      confirmPassword: Yup.string().oneOf([Yup.ref('password'), null], 'Passwords must match').required('Confirm Password is required')\n    });\n\n    function onSubmit({\n      password,\n      confirmPassword\n    }, {\n      setSubmitting\n    }) {// alertService.clear();\n      // accountService.resetPassword({ token, password, confirmPassword })\n      //     .then(() => {\n      //         alertService.success('Password reset successful, you can now login', { keepAfterRouteChange: true });\n      //         history.push('login');\n      //     })\n      //     .catch(error => {\n      //         setSubmitting(false);\n      //         alertService.error(error);\n      //     });\n    }\n\n    return React.createElement(Formik, {\n      initialValues: initialValues,\n      validationSchema: validationSchema,\n      onSubmit: onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, ({\n      errors,\n      touched,\n      isSubmitting\n    }) => React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"Password\"), React.createElement(Field, {\n      name: \"password\",\n      type: \"password\",\n      className: 'form-control' + (errors.password && touched.password ? ' is-invalid' : ''),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), React.createElement(ErrorMessage, {\n      name: \"password\",\n      component: \"div\",\n      className: \"invalid-feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Confirm Password\"), React.createElement(Field, {\n      name: \"confirmPassword\",\n      type: \"password\",\n      className: 'form-control' + (errors.confirmPassword && touched.confirmPassword ? ' is-invalid' : ''),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(ErrorMessage, {\n      name: \"confirmPassword\",\n      component: \"div\",\n      className: \"invalid-feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"submit\",\n      disabled: isSubmitting,\n      className: \"btn btn-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, isSubmitting && React.createElement(\"span\", {\n      className: \"spinner-border spinner-border-sm mr-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), \"Reset Password\"), React.createElement(Link, {\n      to: \"/login\",\n      className: \"btn btn-link\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Cancel\")))));\n  }\n\n  function getBody() {\n    switch (tokenStatus) {\n      case TokenStatus.Valid:\n        return getForm();\n\n      case TokenStatus.Invalid:\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, \"Token validation failed, if the token has expired you can get a new one at the \", React.createElement(Link, {\n          to: \"forgot-password\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, \"forgot password\"), \" page.\");\n\n      case TokenStatus.Validating:\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }, \"Validating token...\");\n    }\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"Reset Password\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, getBody()));\n}\n\nexport default ResetPassword;","map":{"version":3,"sources":["/Users/z0041gm/school/DigitalSkillsAssessment/src/util/ResetPassword.js"],"names":["React","useState","useEffect","Link","queryString","Formik","Field","Form","ErrorMessage","Yup","ResetPassword","history","TokenStatus","Validating","Valid","Invalid","token","setToken","tokenStatus","setTokenStatus","getForm","initialValues","password","confirmPassword","validationSchema","object","shape","string","min","required","oneOf","ref","onSubmit","setSubmitting","errors","touched","isSubmitting","getBody"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport queryString from 'query-string';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nfunction ResetPassword({ history }) {\n    const TokenStatus = {\n        Validating: 'Validating',\n        Valid: 'Valid',\n        Invalid: 'Invalid'\n    }\n\n    const [token, setToken] = useState(null);\n    const [tokenStatus, setTokenStatus] = useState(TokenStatus.Validating);\n\n    // useEffect(() => {\n    //     const location = window.location;\n    //     const { token } = queryString.parse(location.search);\n    //\n    //     // remove token from url to prevent http referer leakage\n    //     history.replace(location.pathname);\n    //\n    //     accountService.validateResetToken(token)\n    //         .then(() => {\n    //             setToken(token);\n    //             setTokenStatus(TokenStatus.Valid);\n    //         })\n    //         .catch(() => {\n    //             setTokenStatus(TokenStatus.Invalid);\n    //         });\n    // }, []);\n\n    function getForm() {\n        const initialValues = {\n            password: '',\n            confirmPassword: ''\n        };\n\n        const validationSchema = Yup.object().shape({\n            password: Yup.string()\n                .min(6, 'Password must be at least 6 characters')\n                .required('Password is required'),\n            confirmPassword: Yup.string()\n                .oneOf([Yup.ref('password'), null], 'Passwords must match')\n                .required('Confirm Password is required'),\n        });\n\n        function onSubmit({ password, confirmPassword }, { setSubmitting }) {\n            // alertService.clear();\n            // accountService.resetPassword({ token, password, confirmPassword })\n            //     .then(() => {\n            //         alertService.success('Password reset successful, you can now login', { keepAfterRouteChange: true });\n            //         history.push('login');\n            //     })\n            //     .catch(error => {\n            //         setSubmitting(false);\n            //         alertService.error(error);\n            //     });\n        }\n\n        return (\n            <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit}>\n                {({ errors, touched, isSubmitting }) => (\n                    <Form>\n                        <div className=\"form-group\">\n                            <label>Password</label>\n                            <Field name=\"password\" type=\"password\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Confirm Password</label>\n                            <Field name=\"confirmPassword\" type=\"password\" className={'form-control' + (errors.confirmPassword && touched.confirmPassword ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"confirmPassword\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                        <div className=\"form-row\">\n                            <div className=\"form-group col\">\n                                <button type=\"submit\" disabled={isSubmitting} className=\"btn btn-primary\">\n                                    {isSubmitting && <span className=\"spinner-border spinner-border-sm mr-1\"></span>}\n                                    Reset Password\n                                </button>\n                                <Link to=\"/login\" className=\"btn btn-link\">Cancel</Link>\n                            </div>\n                        </div>\n                    </Form>\n                )}\n            </Formik>\n        );\n    }\n\n    function getBody() {\n        switch (tokenStatus) {\n            case TokenStatus.Valid:\n                return getForm();\n            case TokenStatus.Invalid:\n                return <div>Token validation failed, if the token has expired you can get a new one at the <Link to=\"forgot-password\">forgot password</Link> page.</div>;\n            case TokenStatus.Validating:\n                return <div>Validating token...</div>;\n        }\n    }\n\n    return (\n        <div>\n            <h2>Reset Password</h2>\n            <div>{getBody()}</div>\n        </div>\n    )\n}\n\nexport default ResetPassword;"]},"metadata":{},"sourceType":"module"}