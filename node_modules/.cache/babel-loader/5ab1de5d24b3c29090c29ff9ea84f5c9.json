{"ast":null,"code":"var _jsxFileName = \"/Users/z0041gm/school/DigitalSkillsAssessment/src/util/PasswordReset/account/ForgotPassword.js\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { accountService, alertService } from '../_services';\n\nfunction ForgotPassword() {\n  const initialValues = {\n    email: ''\n  };\n  const validationSchema = Yup.object().shape({\n    email: Yup.string().email('Email is invalid').required('Email is required')\n  });\n\n  function onSubmit({\n    email\n  }, {\n    setSubmitting\n  }) {\n    alertService.clear();\n    accountService.forgotPassword(email).then(() => alertService.success('Please check your email for password reset instructions')).catch(error => alertService.error(error)).finally(() => setSubmitting(false));\n  }\n\n  return React.createElement(Formik, {\n    initialValues: initialValues,\n    validationSchema: validationSchema,\n    onSubmit: onSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, ({\n    errors,\n    touched,\n    isSubmitting\n  }) => React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    style: {\n      textAlign: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"Forgot Password\"), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"Email\"), React.createElement(Field, {\n    name: \"email\",\n    type: \"text\",\n    className: 'form-control' + (errors.email && touched.email ? ' is-invalid' : ''),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }), React.createElement(ErrorMessage, {\n    name: \"email\",\n    component: \"div\",\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"submit\",\n    disabled: isSubmitting,\n    className: \"btn btn-primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Submit\"), React.createElement(Link, {\n    to: \"login\",\n    className: \"btn btn-link\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"Cancel\")))));\n}\n\nexport { ForgotPassword };","map":{"version":3,"sources":["/Users/z0041gm/school/DigitalSkillsAssessment/src/util/PasswordReset/account/ForgotPassword.js"],"names":["React","Link","Formik","Field","Form","ErrorMessage","Yup","accountService","alertService","ForgotPassword","initialValues","email","validationSchema","object","shape","string","required","onSubmit","setSubmitting","clear","forgotPassword","then","success","catch","error","finally","errors","touched","isSubmitting","textAlign"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,IAAxB,EAA8BC,YAA9B,QAAkD,QAAlD;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AAEA,SAASC,cAAT,EAAyBC,YAAzB,QAA6C,cAA7C;;AAEA,SAASC,cAAT,GAA0B;AACtB,QAAMC,aAAa,GAAG;AAClBC,IAAAA,KAAK,EAAE;AADW,GAAtB;AAIA,QAAMC,gBAAgB,GAAGN,GAAG,CAACO,MAAJ,GAAaC,KAAb,CAAmB;AACxCH,IAAAA,KAAK,EAAEL,GAAG,CAACS,MAAJ,GACFJ,KADE,CACI,kBADJ,EAEFK,QAFE,CAEO,mBAFP;AADiC,GAAnB,CAAzB;;AAMA,WAASC,QAAT,CAAkB;AAAEN,IAAAA;AAAF,GAAlB,EAA6B;AAAEO,IAAAA;AAAF,GAA7B,EAAgD;AAC5CV,IAAAA,YAAY,CAACW,KAAb;AACAZ,IAAAA,cAAc,CAACa,cAAf,CAA8BT,KAA9B,EACKU,IADL,CACU,MAAMb,YAAY,CAACc,OAAb,CAAqB,yDAArB,CADhB,EAEKC,KAFL,CAEWC,KAAK,IAAIhB,YAAY,CAACgB,KAAb,CAAmBA,KAAnB,CAFpB,EAGKC,OAHL,CAGa,MAAMP,aAAa,CAAC,KAAD,CAHhC;AAIH;;AAED,SACI,oBAAC,MAAD;AAAQ,IAAA,aAAa,EAAER,aAAvB;AAAsC,IAAA,gBAAgB,EAAEE,gBAAxD;AAA0E,IAAA,QAAQ,EAAEK,QAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,CAAC;AAAES,IAAAA,MAAF;AAAUC,IAAAA,OAAV;AAAmBC,IAAAA;AAAnB,GAAD,KACG,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAI,IAAA,KAAK,EAAE;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,EAEI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,EAEI,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,OAAZ;AAAoB,IAAA,IAAI,EAAC,MAAzB;AAAgC,IAAA,SAAS,EAAE,kBAAkBH,MAAM,CAACf,KAAP,IAAgBgB,OAAO,CAAChB,KAAxB,GAAgC,aAAhC,GAAgD,EAAlE,CAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGI,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAC,OAAnB;AAA2B,IAAA,SAAS,EAAC,KAArC;AAA2C,IAAA,SAAS,EAAC,kBAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CAFJ,EAOI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,QAAQ,EAAEiB,YAAhC;AAA8C,IAAA,SAAS,EAAC,iBAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAII,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAC,OAAT;AAAiB,IAAA,SAAS,EAAC,cAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,CADJ,CAPJ,CAFR,CADJ;AAsBH;;AAED,SAASnB,cAAT","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nimport { accountService, alertService } from '../_services';\n\nfunction ForgotPassword() {\n    const initialValues = {\n        email: ''\n    };\n\n    const validationSchema = Yup.object().shape({\n        email: Yup.string()\n            .email('Email is invalid')\n            .required('Email is required')\n    });\n\n    function onSubmit({ email }, { setSubmitting }) {\n        alertService.clear();\n        accountService.forgotPassword(email)\n            .then(() => alertService.success('Please check your email for password reset instructions'))\n            .catch(error => alertService.error(error))\n            .finally(() => setSubmitting(false));\n    }\n\n    return (\n        <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit}>\n            {({ errors, touched, isSubmitting }) => (\n                <Form>\n                    <h2 style={{ textAlign: 'center' }}>Forgot Password</h2>\n                    <div className=\"form-group\">\n                        <label>Email</label>\n                        <Field name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\n                        <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\n                    </div>\n                    <div className=\"form-row\">\n                        <div className=\"form-group col\">\n                            <button type=\"submit\" disabled={isSubmitting} className=\"btn btn-primary\">\n                                Submit\n                            </button>\n                            <Link to=\"login\" className=\"btn btn-link\">Cancel</Link>\n                        </div>\n                    </div>\n                </Form>\n            )}\n        </Formik>\n    )\n}\n\nexport { ForgotPassword };"]},"metadata":{},"sourceType":"module"}