{"ast":null,"code":"import { accountService } from '../_services';\nexport const fetchWrapper = {\n  get,\n  post,\n  put,\n  delete: _delete\n};\n\nfunction get(url) {\n  const requestOptions = {\n    method: 'GET',\n    headers: authHeader(url)\n  };\n  return fetch(url, requestOptions).then(handleResponse);\n}\n\nfunction post(url, body) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      ...authHeader(url)\n    },\n    body: JSON.stringify(body)\n  };\n  return fetch(url, requestOptions).then(handleResponse);\n}\n\nfunction put(url, body) {\n  const requestOptions = {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      ...authHeader(url)\n    },\n    body: JSON.stringify(body)\n  };\n  return fetch(url, requestOptions).then(handleResponse);\n} // prefixed with underscored because delete is a reserved word in javascript\n\n\nfunction _delete(url) {\n  const requestOptions = {\n    method: 'DELETE',\n    headers: authHeader(url)\n  };\n  return fetch(url, requestOptions).then(handleResponse);\n} // helper functions\n\n\nfunction authHeader(url) {\n  // return auth header with jwt if user is logged in and request is to the api url\n  const user = accountService.userValue;\n  const isLoggedIn = user && user.token;\n  const isApiUrl = url.startsWith('http://localhost:3000');\n\n  if (isLoggedIn && isApiUrl) {\n    return {\n      Authorization: `Bearer ${user.token}`\n    };\n  } else {\n    return {};\n  }\n}\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if ([401, 403].includes(response.status)) {\n        // auto logout if 401 Unauthorized or 403 Forbidden response returned from api\n        accountService.logout();\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}","map":{"version":3,"sources":["/Users/z0041gm/school/DigitalSkillsAssessment/src/util/PasswordReset/_helpers/fetch-wrapper.js"],"names":["accountService","fetchWrapper","get","post","put","delete","_delete","url","requestOptions","method","headers","authHeader","fetch","then","handleResponse","body","JSON","stringify","user","userValue","isLoggedIn","token","isApiUrl","startsWith","Authorization","response","text","data","parse","ok","includes","status","logout","error","message","statusText","Promise","reject"],"mappings":"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","sourcesContent":["import { accountService } from '../_services';\n\nexport const fetchWrapper = {\n    get,\n    post,\n    put,\n    delete: _delete\n}\n\nfunction get(url) {\n    const requestOptions = {\n        method: 'GET',\n        headers: authHeader(url)\n    };\n    return fetch(url, requestOptions).then(handleResponse);\n}\n\nfunction post(url, body) {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json', ...authHeader(url) },\n        body: JSON.stringify(body)\n    };\n    return fetch(url, requestOptions).then(handleResponse);\n}\n\nfunction put(url, body) {\n    const requestOptions = {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json', ...authHeader(url) },\n        body: JSON.stringify(body)\n    };\n    return fetch(url, requestOptions).then(handleResponse);\n}\n\n// prefixed with underscored because delete is a reserved word in javascript\nfunction _delete(url) {\n    const requestOptions = {\n        method: 'DELETE',\n        headers: authHeader(url)\n    };\n    return fetch(url, requestOptions).then(handleResponse);\n}\n\n// helper functions\n\nfunction authHeader(url) {\n    // return auth header with jwt if user is logged in and request is to the api url\n    const user = accountService.userValue;\n    const isLoggedIn = user && user.token;\n    const isApiUrl = url.startsWith('http://localhost:3000');\n    if (isLoggedIn && isApiUrl) {\n        return { Authorization: `Bearer ${user.token}` };\n    } else {\n        return {};\n    }\n}\n\nfunction handleResponse(response) {\n    return response.text().then(text => {\n        const data = text && JSON.parse(text);\n\n        if (!response.ok) {\n            if ([401, 403].includes(response.status)) {\n                // auto logout if 401 Unauthorized or 403 Forbidden response returned from api\n                accountService.logout();\n            }\n\n            const error = (data && data.message) || response.statusText;\n            return Promise.reject(error);\n        }\n\n        return data;\n    });\n}"]},"metadata":{},"sourceType":"module"}