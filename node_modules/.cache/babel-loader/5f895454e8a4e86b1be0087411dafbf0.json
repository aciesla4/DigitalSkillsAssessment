{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { fetchWrapper, history } from '../_helpers';\nconst userSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('user')));\nconst baseUrl = `http://localhost:3000/accounts`;\nexport const accountService = {\n  login,\n  logout,\n  register,\n  verifyEmail,\n  forgotPassword,\n  validateResetToken,\n  resetPassword,\n  getAll,\n  getById,\n  create,\n  update,\n  delete: _delete,\n  user: userSubject.asObservable(),\n\n  get userValue() {\n    return userSubject.value;\n  }\n\n};\n\nfunction login(email, password) {\n  return fetchWrapper.post(`${baseUrl}/authenticate`, {\n    email,\n    password\n  }).then(user => {\n    // store user details and jwt token in local storage to keep user logged in between page refreshes\n    localStorage.setItem('user', JSON.stringify(user)); // publish user to subscribers\n\n    userSubject.next(user);\n    return user;\n  });\n}\n\nfunction logout() {\n  // remove user from local storage and publish null to user subject\n  localStorage.removeItem('user');\n  userSubject.next(null);\n  history.push('/account/login');\n}\n\nfunction register(params) {\n  return fetchWrapper.post(`${baseUrl}/register`, params);\n}\n\nfunction verifyEmail(token) {\n  return fetchWrapper.post(`${baseUrl}/verify-email`, {\n    token\n  });\n}\n\nfunction forgotPassword(email) {\n  return fetchWrapper.post(`${baseUrl}/forgot-password`, {\n    email\n  });\n}\n\nfunction validateResetToken(token) {\n  return fetchWrapper.post(`${baseUrl}/validate-reset-token`, {\n    token\n  });\n}\n\nfunction resetPassword({\n  token,\n  password,\n  confirmPassword\n}) {\n  return fetchWrapper.post(`${baseUrl}/reset-password`, {\n    token,\n    password,\n    confirmPassword\n  });\n}\n\nfunction getAll() {\n  return fetchWrapper.get(baseUrl);\n}\n\nfunction getById(id) {\n  return fetchWrapper.get(`${baseUrl}/${id}`);\n}\n\nfunction create(params) {\n  return fetchWrapper.post(baseUrl, params);\n}\n\nfunction update(id, params) {\n  return fetchWrapper.put(`${baseUrl}/${id}`, params).then(user => {\n    // update stored user if the logged in user updated their own record\n    if (user.id === userSubject.value.id) {\n      // update local storage\n      user = { ...userSubject.value,\n        ...user\n      };\n      localStorage.setItem('user', JSON.stringify(user)); // publish updated user to subscribers\n\n      userSubject.next(user);\n    }\n\n    return user;\n  });\n} // prefixed with underscored because delete is a reserved word in javascript\n\n\nfunction _delete(id) {\n  return fetchWrapper.delete(`${baseUrl}/${id}`).then(x => {\n    // auto logout if the logged in user deleted their own record\n    if (id === userSubject.value.id) {\n      logout();\n    }\n\n    return x;\n  });\n}","map":{"version":3,"sources":["/Users/z0041gm/school/DigitalSkillsAssessment/src/util/PasswordReset/_services/account.service.js"],"names":["BehaviorSubject","fetchWrapper","history","userSubject","JSON","parse","localStorage","getItem","baseUrl","accountService","login","logout","register","verifyEmail","forgotPassword","validateResetToken","resetPassword","getAll","getById","create","update","delete","_delete","user","asObservable","userValue","value","email","password","post","then","setItem","stringify","next","removeItem","push","params","token","confirmPassword","get","id","put","x"],"mappings":"AAAA,SAASA,eAAT,QAAgC,MAAhC;AAEA,SAASC,YAAT,EAAuBC,OAAvB,QAAsC,aAAtC;AAEA,MAAMC,WAAW,GAAG,IAAIH,eAAJ,CAAoBI,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAApB,CAApB;AACA,MAAMC,OAAO,GAAI,gCAAjB;AAEA,OAAO,MAAMC,cAAc,GAAG;AAC1BC,EAAAA,KAD0B;AAE1BC,EAAAA,MAF0B;AAG1BC,EAAAA,QAH0B;AAI1BC,EAAAA,WAJ0B;AAK1BC,EAAAA,cAL0B;AAM1BC,EAAAA,kBAN0B;AAO1BC,EAAAA,aAP0B;AAQ1BC,EAAAA,MAR0B;AAS1BC,EAAAA,OAT0B;AAU1BC,EAAAA,MAV0B;AAW1BC,EAAAA,MAX0B;AAY1BC,EAAAA,MAAM,EAAEC,OAZkB;AAa1BC,EAAAA,IAAI,EAAEpB,WAAW,CAACqB,YAAZ,EAboB;;AAc1B,MAAIC,SAAJ,GAAiB;AAAE,WAAOtB,WAAW,CAACuB,KAAnB;AAA0B;;AAdnB,CAAvB;;AAiBP,SAAShB,KAAT,CAAeiB,KAAf,EAAsBC,QAAtB,EAAgC;AAC5B,SAAO3B,YAAY,CAAC4B,IAAb,CAAmB,GAAErB,OAAQ,eAA7B,EAA6C;AAAEmB,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAA7C,EACFE,IADE,CACGP,IAAI,IAAI;AACV;AACAjB,IAAAA,YAAY,CAACyB,OAAb,CAAqB,MAArB,EAA6B3B,IAAI,CAAC4B,SAAL,CAAeT,IAAf,CAA7B,EAFU,CAIV;;AACApB,IAAAA,WAAW,CAAC8B,IAAZ,CAAiBV,IAAjB;AAEA,WAAOA,IAAP;AACH,GATE,CAAP;AAUH;;AAED,SAASZ,MAAT,GAAkB;AACd;AACAL,EAAAA,YAAY,CAAC4B,UAAb,CAAwB,MAAxB;AACA/B,EAAAA,WAAW,CAAC8B,IAAZ,CAAiB,IAAjB;AACA/B,EAAAA,OAAO,CAACiC,IAAR,CAAa,gBAAb;AACH;;AAED,SAASvB,QAAT,CAAkBwB,MAAlB,EAA0B;AACtB,SAAOnC,YAAY,CAAC4B,IAAb,CAAmB,GAAErB,OAAQ,WAA7B,EAAyC4B,MAAzC,CAAP;AACH;;AAED,SAASvB,WAAT,CAAqBwB,KAArB,EAA4B;AACxB,SAAOpC,YAAY,CAAC4B,IAAb,CAAmB,GAAErB,OAAQ,eAA7B,EAA6C;AAAE6B,IAAAA;AAAF,GAA7C,CAAP;AACH;;AAED,SAASvB,cAAT,CAAwBa,KAAxB,EAA+B;AAC3B,SAAO1B,YAAY,CAAC4B,IAAb,CAAmB,GAAErB,OAAQ,kBAA7B,EAAgD;AAAEmB,IAAAA;AAAF,GAAhD,CAAP;AACH;;AAED,SAASZ,kBAAT,CAA4BsB,KAA5B,EAAmC;AAC/B,SAAOpC,YAAY,CAAC4B,IAAb,CAAmB,GAAErB,OAAQ,uBAA7B,EAAqD;AAAE6B,IAAAA;AAAF,GAArD,CAAP;AACH;;AAED,SAASrB,aAAT,CAAuB;AAAEqB,EAAAA,KAAF;AAAST,EAAAA,QAAT;AAAmBU,EAAAA;AAAnB,CAAvB,EAA6D;AACzD,SAAOrC,YAAY,CAAC4B,IAAb,CAAmB,GAAErB,OAAQ,iBAA7B,EAA+C;AAAE6B,IAAAA,KAAF;AAAST,IAAAA,QAAT;AAAmBU,IAAAA;AAAnB,GAA/C,CAAP;AACH;;AAED,SAASrB,MAAT,GAAkB;AACd,SAAOhB,YAAY,CAACsC,GAAb,CAAiB/B,OAAjB,CAAP;AACH;;AAED,SAASU,OAAT,CAAiBsB,EAAjB,EAAqB;AACjB,SAAOvC,YAAY,CAACsC,GAAb,CAAkB,GAAE/B,OAAQ,IAAGgC,EAAG,EAAlC,CAAP;AACH;;AAED,SAASrB,MAAT,CAAgBiB,MAAhB,EAAwB;AACpB,SAAOnC,YAAY,CAAC4B,IAAb,CAAkBrB,OAAlB,EAA2B4B,MAA3B,CAAP;AACH;;AAED,SAAShB,MAAT,CAAgBoB,EAAhB,EAAoBJ,MAApB,EAA4B;AACxB,SAAOnC,YAAY,CAACwC,GAAb,CAAkB,GAAEjC,OAAQ,IAAGgC,EAAG,EAAlC,EAAqCJ,MAArC,EACFN,IADE,CACGP,IAAI,IAAI;AACV;AACA,QAAIA,IAAI,CAACiB,EAAL,KAAYrC,WAAW,CAACuB,KAAZ,CAAkBc,EAAlC,EAAsC;AAClC;AACAjB,MAAAA,IAAI,GAAG,EAAE,GAAGpB,WAAW,CAACuB,KAAjB;AAAwB,WAAGH;AAA3B,OAAP;AACAjB,MAAAA,YAAY,CAACyB,OAAb,CAAqB,MAArB,EAA6B3B,IAAI,CAAC4B,SAAL,CAAeT,IAAf,CAA7B,EAHkC,CAKlC;;AACApB,MAAAA,WAAW,CAAC8B,IAAZ,CAAiBV,IAAjB;AACH;;AACD,WAAOA,IAAP;AACH,GAZE,CAAP;AAaH,C,CAED;;;AACA,SAASD,OAAT,CAAiBkB,EAAjB,EAAqB;AACjB,SAAOvC,YAAY,CAACoB,MAAb,CAAqB,GAAEb,OAAQ,IAAGgC,EAAG,EAArC,EACFV,IADE,CACGY,CAAC,IAAI;AACP;AACA,QAAIF,EAAE,KAAKrC,WAAW,CAACuB,KAAZ,CAAkBc,EAA7B,EAAiC;AAC7B7B,MAAAA,MAAM;AACT;;AACD,WAAO+B,CAAP;AACH,GAPE,CAAP;AAQH","sourcesContent":["import { BehaviorSubject } from 'rxjs';\n\nimport { fetchWrapper, history } from '../_helpers';\n\nconst userSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('user')));\nconst baseUrl = `http://localhost:3000/accounts`;\n\nexport const accountService = {\n    login,\n    logout,\n    register,\n    verifyEmail,\n    forgotPassword,\n    validateResetToken,\n    resetPassword,\n    getAll,\n    getById,\n    create,\n    update,\n    delete: _delete,\n    user: userSubject.asObservable(),\n    get userValue () { return userSubject.value }\n};\n\nfunction login(email, password) {\n    return fetchWrapper.post(`${baseUrl}/authenticate`, { email, password })\n        .then(user => {\n            // store user details and jwt token in local storage to keep user logged in between page refreshes\n            localStorage.setItem('user', JSON.stringify(user));\n\n            // publish user to subscribers\n            userSubject.next(user);\n\n            return user;\n        });\n}\n\nfunction logout() {\n    // remove user from local storage and publish null to user subject\n    localStorage.removeItem('user');\n    userSubject.next(null);\n    history.push('/account/login');\n}\n\nfunction register(params) {\n    return fetchWrapper.post(`${baseUrl}/register`, params);\n}\n\nfunction verifyEmail(token) {\n    return fetchWrapper.post(`${baseUrl}/verify-email`, { token });\n}\n\nfunction forgotPassword(email) {\n    return fetchWrapper.post(`${baseUrl}/forgot-password`, { email });\n}\n\nfunction validateResetToken(token) {\n    return fetchWrapper.post(`${baseUrl}/validate-reset-token`, { token });\n}\n\nfunction resetPassword({ token, password, confirmPassword }) {\n    return fetchWrapper.post(`${baseUrl}/reset-password`, { token, password, confirmPassword });\n}\n\nfunction getAll() {\n    return fetchWrapper.get(baseUrl);\n}\n\nfunction getById(id) {\n    return fetchWrapper.get(`${baseUrl}/${id}`);\n}\n\nfunction create(params) {\n    return fetchWrapper.post(baseUrl, params);\n}\n\nfunction update(id, params) {\n    return fetchWrapper.put(`${baseUrl}/${id}`, params)\n        .then(user => {\n            // update stored user if the logged in user updated their own record\n            if (user.id === userSubject.value.id) {\n                // update local storage\n                user = { ...userSubject.value, ...user };\n                localStorage.setItem('user', JSON.stringify(user));\n\n                // publish updated user to subscribers\n                userSubject.next(user);\n            }\n            return user;\n        });\n}\n\n// prefixed with underscored because delete is a reserved word in javascript\nfunction _delete(id) {\n    return fetchWrapper.delete(`${baseUrl}/${id}`)\n        .then(x => {\n            // auto logout if the logged in user deleted their own record\n            if (id === userSubject.value.id) {\n                logout();\n            }\n            return x;\n        });\n}"]},"metadata":{},"sourceType":"module"}