{"ast":null,"code":"import { alertService } from '../_services'; // array in local storage for registered users\n\nlet users = JSON.parse(localStorage.getItem('users')) || [];\nexport function configureFakeBackend() {\n  let realFetch = window.fetch;\n\n  window.fetch = function (url, opts) {\n    return new Promise((resolve, reject) => {\n      // wrap in timeout to simulate server api call\n      addDefaultUser();\n      setTimeout(handleRoute, 500);\n\n      function handleRoute() {\n        const {\n          method\n        } = opts || {};\n\n        switch (true) {\n          case url.endsWith('/accounts/authenticate') && method === 'POST':\n            return authenticate();\n\n          case url.endsWith('/accounts/register') && method === 'POST':\n            return register();\n\n          case url.endsWith('/accounts/verify-email') && method === 'POST':\n            return verifyEmail();\n\n          case url.endsWith('/accounts/forgot-password') && method === 'POST':\n            return forgotPassword();\n\n          case url.endsWith('/accounts/validate-reset-token') && method === 'POST':\n            return validateResetToken();\n\n          case url.endsWith('/accounts/reset-password') && method === 'POST':\n            return resetPassword();\n\n          case url.endsWith('/accounts') && method === 'GET':\n            return getUsers();\n\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'GET':\n            return getUserById();\n\n          case url.endsWith('/accounts') && method === 'POST':\n            return createUser();\n\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'PUT':\n            return updateUser();\n\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'DELETE':\n            return deleteUser();\n\n          default:\n            // pass through any requests not handled above\n            return realFetch(url, opts).then(response => resolve(response)).catch(error => reject(error));\n        }\n      } // route functions\n\n\n      function authenticate() {\n        const {\n          email,\n          password\n        } = body();\n        const user = users.find(x => x.email === email && x.password === password && x.isVerified);\n        if (!user) return error('Email or password is incorrect');\n        return ok({\n          id: user.id,\n          email: user.email,\n          title: user.title,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          role: user.role,\n          token: `fake-jwt-token.${user.role}.${user.id}`\n        });\n      }\n\n      function register() {\n        const user = body();\n\n        if (users.find(x => x.email === user.email)) {\n          // display email already registered \"email\" in alert\n          setTimeout(() => {\n            alertService.info(`\n                            <h4>Email Already Registered</h4>\n                            <p>Your email ${user.email} is already registered.</p>\n                            <p>If you don't know your password please visit the forgot password page.</p>\n                            <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an api. A real backend would send a real email.</div>\n                        `, {\n              autoClose: false\n            });\n          }, 1000); // always return ok() response to prevent email enumeration\n\n          return ok();\n        } // assign user id and a few other properties then save\n\n\n        user.id = newUserId();\n        user.dateCreated = new Date().toISOString();\n        user.verificationToken = new Date().getTime().toString();\n        user.isVerified = false;\n        delete user.confirmPassword;\n        users.push(user);\n        localStorage.setItem('users', JSON.stringify(users)); // display verification email in alert\n\n        setTimeout(() => {\n          const verifyUrl = `localhost:3000/level15/account/verify-email?token=${user.verificationToken}`;\n          alertService.info(`\n                        <h4>Verification Email</h4>\n                        <p>Thanks for registering!</p>\n                        <p>Please click the below link to verify your email address:</p>\n                        <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                        <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an api. A real backend would send a real email.</div>\n                    `, {\n            autoClose: false\n          });\n        }, 1000);\n        return ok();\n      }\n\n      function addDefaultUser() {\n        const user = {\n          email: 'agent203@spyacademy.org',\n          password: 'original'\n        };\n        user.id = newUserId();\n        user.dateCreated = new Date().toISOString();\n        user.verificationToken = new Date().getTime().toString();\n        user.isVerified = true;\n        delete user.confirmPassword;\n        users.push(user);\n        localStorage.setItem('users', JSON.stringify(users));\n      }\n\n      function verifyEmail() {\n        const {\n          token\n        } = body();\n        const user = users.find(x => !!x.verificationToken && x.verificationToken === token);\n        if (!user) return error('Verification failed'); // set is verified flag to true if token is valid\n\n        user.isVerified = true;\n        localStorage.setItem('users', JSON.stringify(users));\n        return ok();\n      }\n\n      function forgotPassword() {\n        const {\n          email\n        } = body();\n        const user = users.find(x => x.email === email); // always return ok() response to prevent email enumeration\n\n        if (!user) return ok(); // create reset token that expires after 24 hours\n\n        user.resetToken = new Date().getTime().toString();\n        user.resetTokenExpiry = new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString();\n        localStorage.setItem('users', JSON.stringify(users)); // display password reset email in alert\n\n        setTimeout(() => {\n          const resetUrl = `/level15/account/reset-password?token=${user.resetToken}`;\n          alertService.info(`\n                        <h4>Reset Password Email</h4>\n                        <p>Please click the below link to reset your password, the link will be valid for 1 day:</p>\n                        <p><a href='${resetUrl}'>localhost:3000${resetUrl}</a></p>\n                    `, {\n            autoClose: false\n          });\n        }, 1000);\n        return ok();\n      }\n\n      function validateResetToken() {\n        const {\n          token\n        } = body();\n        const user = users.find(x => !!x.resetToken && x.resetToken === token && new Date() < new Date(x.resetTokenExpiry));\n        if (!user) return error('Invalid token');\n        return ok();\n      }\n\n      function resetPassword() {\n        const {\n          token,\n          password\n        } = body();\n        const user = users.find(x => !!x.resetToken && x.resetToken === token && new Date() < new Date(x.resetTokenExpiry));\n        if (!user) return error('Invalid token'); // update password and remove reset token\n\n        user.password = password;\n        user.isVerified = true;\n        delete user.resetToken;\n        delete user.resetTokenExpiry;\n        localStorage.setItem('users', JSON.stringify(users));\n        return ok();\n      }\n\n      function getUsers() {\n        return ok(users);\n      }\n\n      function getUserById() {\n        if (!isAuthenticated()) return unauthorized();\n        let user = users.find(x => x.id === idFromUrl()); // users can get own profile and admins can get all profiles\n\n        if (user.id !== idFromToken()) {\n          return unauthorized();\n        }\n\n        return ok(user);\n      }\n\n      function createUser() {\n        const user = body();\n\n        if (users.find(x => x.email === user.email)) {\n          return error(`Email ${user.email} is already registered`);\n        } // assign user id and a few other properties then save\n\n\n        user.id = newUserId();\n        user.dateCreated = new Date().toISOString();\n        user.isVerified = true;\n        delete user.confirmPassword;\n        users.push(user);\n        localStorage.setItem('users', JSON.stringify(users));\n        return ok();\n      }\n\n      function updateUser() {\n        if (!isAuthenticated()) return unauthorized();\n        let params = body();\n        let user = users.find(x => x.id === idFromUrl()); // users can update own profile and admins can update all profiles\n\n        if (user.id !== idFromToken()) {\n          return unauthorized();\n        } // only update password if included\n\n\n        if (!params.password) {\n          delete params.password;\n        } // don't save confirm password\n\n\n        delete params.confirmPassword; // update and save user\n\n        Object.assign(user, params);\n        localStorage.setItem('users', JSON.stringify(users));\n        return ok({\n          id: user.id,\n          email: user.email,\n          title: user.title,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          role: user.role\n        });\n      }\n\n      function deleteUser() {\n        if (!isAuthenticated()) return unauthorized();\n        let user = users.find(x => x.id === idFromUrl()); // users can delete own account and admins can delete any account\n\n        if (user.id !== idFromToken()) {\n          return unauthorized();\n        } // delete user then save\n\n\n        users = users.filter(x => x.id !== idFromUrl());\n        localStorage.setItem('users', JSON.stringify(users));\n        return ok();\n      } // helper functions\n\n\n      function ok(body) {\n        resolve({\n          ok: true,\n          text: () => Promise.resolve(JSON.stringify(body))\n        });\n      }\n\n      function unauthorized() {\n        resolve({\n          status: 401,\n          text: () => Promise.resolve(JSON.stringify({\n            message: 'Unauthorized'\n          }))\n        });\n      }\n\n      function error(message) {\n        resolve({\n          status: 400,\n          text: () => Promise.resolve(JSON.stringify({\n            message\n          }))\n        });\n      }\n\n      function isAuthenticated() {\n        return (opts.headers['Authorization'] || '').startsWith('Bearer fake-jwt-token');\n      }\n\n      function idFromUrl() {\n        const urlParts = url.split('/');\n        return parseInt(urlParts[urlParts.length - 1]);\n      }\n\n      function idFromToken() {\n        return parseInt(opts.headers['Authorization'].split('.')[2]);\n      }\n\n      function body() {\n        return opts.body && JSON.parse(opts.body);\n      }\n\n      function newUserId() {\n        return users.length ? Math.max(...users.map(x => x.id)) + 1 : 1;\n      }\n    });\n  };\n}","map":{"version":3,"sources":["/Users/z0041gm/school/DigitalSkillsAssessment/src/util/PasswordReset/_helpers/fake-backend.js"],"names":["alertService","users","JSON","parse","localStorage","getItem","configureFakeBackend","realFetch","window","fetch","url","opts","Promise","resolve","reject","addDefaultUser","setTimeout","handleRoute","method","endsWith","authenticate","register","verifyEmail","forgotPassword","validateResetToken","resetPassword","getUsers","match","getUserById","createUser","updateUser","deleteUser","then","response","catch","error","email","password","body","user","find","x","isVerified","ok","id","title","firstName","lastName","role","token","info","autoClose","newUserId","dateCreated","Date","toISOString","verificationToken","getTime","toString","confirmPassword","push","setItem","stringify","verifyUrl","resetToken","resetTokenExpiry","now","resetUrl","isAuthenticated","unauthorized","idFromUrl","idFromToken","params","Object","assign","filter","text","status","message","headers","startsWith","urlParts","split","parseInt","length","Math","max","map"],"mappings":"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","sourcesContent":["import { alertService } from '../_services';\n\n// array in local storage for registered users\nlet users = JSON.parse(localStorage.getItem('users')) || [];\n\nexport function configureFakeBackend() {\n    let realFetch = window.fetch;\n    window.fetch = function (url, opts) {\n        return new Promise((resolve, reject) => {\n            // wrap in timeout to simulate server api call\n            addDefaultUser();\n            setTimeout(handleRoute, 500);\n\n            function handleRoute() {\n                const { method } =  opts || {};\n                switch (true) {\n                    case url.endsWith('/accounts/authenticate') && method === 'POST':\n                        return authenticate();\n                    case url.endsWith('/accounts/register') && method === 'POST':\n                        return register();\n                    case url.endsWith('/accounts/verify-email') && method === 'POST':\n                        return verifyEmail();\n                    case url.endsWith('/accounts/forgot-password') && method === 'POST':\n                        return forgotPassword();\n                    case url.endsWith('/accounts/validate-reset-token') && method === 'POST':\n                        return validateResetToken();\n                    case url.endsWith('/accounts/reset-password') && method === 'POST':\n                        return resetPassword();\n                    case url.endsWith('/accounts') && method === 'GET':\n                        return getUsers();\n                    case url.match(/\\/accounts\\/\\d+$/) && method === 'GET':\n                        return getUserById();\n                    case url.endsWith('/accounts') && method === 'POST':\n                        return createUser();\n                    case url.match(/\\/accounts\\/\\d+$/) && method === 'PUT':\n                        return updateUser();\n                    case url.match(/\\/accounts\\/\\d+$/) && method === 'DELETE':\n                        return deleteUser();\n                    default:\n                        // pass through any requests not handled above\n                        return realFetch(url, opts)\n                            .then(response => resolve(response))\n                            .catch(error => reject(error));\n                }\n            }\n\n            // route functions\n\n            function authenticate() {\n                const { email, password } = body();\n                const user = users.find(x => x.email === email && x.password === password && x.isVerified);\n                if (!user) return error('Email or password is incorrect');\n                return ok({\n                    id: user.id,\n                    email: user.email,\n                    title: user.title,\n                    firstName: user.firstName,\n                    lastName: user.lastName,\n                    role: user.role,\n                    token: `fake-jwt-token.${user.role}.${user.id}`\n                });\n            }\n\n            function register() {\n                const user = body();\n\n                if (users.find(x => x.email === user.email)) {\n                    // display email already registered \"email\" in alert\n                    setTimeout(() => {\n                        alertService.info(`\n                            <h4>Email Already Registered</h4>\n                            <p>Your email ${user.email} is already registered.</p>\n                            <p>If you don't know your password please visit the forgot password page.</p>\n                            <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an api. A real backend would send a real email.</div>\n                        `, { autoClose: false });\n                    }, 1000);\n\n                    // always return ok() response to prevent email enumeration\n                    return ok();\n                }\n\n                // assign user id and a few other properties then save\n                user.id = newUserId();\n                user.dateCreated = new Date().toISOString();\n                user.verificationToken = new Date().getTime().toString();\n                user.isVerified = false;\n                delete user.confirmPassword;\n                users.push(user);\n                localStorage.setItem('users', JSON.stringify(users));\n\n                // display verification email in alert\n                setTimeout(() => {\n                    const verifyUrl = `localhost:3000/level15/account/verify-email?token=${user.verificationToken}`;\n                    alertService.info(`\n                        <h4>Verification Email</h4>\n                        <p>Thanks for registering!</p>\n                        <p>Please click the below link to verify your email address:</p>\n                        <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                        <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an api. A real backend would send a real email.</div>\n                    `, { autoClose: false });\n                }, 1000);\n\n                return ok();\n            }\n\n            function addDefaultUser() {\n                const user = {\n                    email: 'agent203@spyacademy.org',\n                    password: 'original'\n                }\n                user.id = newUserId();\n                user.dateCreated = new Date().toISOString();\n                user.verificationToken = new Date().getTime().toString();\n                user.isVerified = true;\n                delete user.confirmPassword;\n                users.push(user);\n                localStorage.setItem('users', JSON.stringify(users));\n            }\n\n            function verifyEmail() {\n                const { token } = body();\n                const user = users.find(x => !!x.verificationToken && x.verificationToken === token);\n\n                if (!user) return error('Verification failed');\n\n                // set is verified flag to true if token is valid\n                user.isVerified = true;\n                localStorage.setItem('users', JSON.stringify(users));\n\n                return ok();\n            }\n\n            function forgotPassword() {\n                const { email } = body();\n                const user = users.find(x => x.email === email);\n\n                // always return ok() response to prevent email enumeration\n                if (!user) return ok();\n\n                // create reset token that expires after 24 hours\n                user.resetToken = new Date().getTime().toString();\n                user.resetTokenExpiry = new Date(Date.now() + 24*60*60*1000).toISOString();\n                localStorage.setItem('users', JSON.stringify(users));\n\n                // display password reset email in alert\n                setTimeout(() => {\n                    const resetUrl = `/level15/account/reset-password?token=${user.resetToken}`;\n                    alertService.info(`\n                        <h4>Reset Password Email</h4>\n                        <p>Please click the below link to reset your password, the link will be valid for 1 day:</p>\n                        <p><a href='${resetUrl}'>localhost:3000${resetUrl}</a></p>\n                    `, { autoClose: false });\n                }, 1000);\n\n                return ok();\n            }\n\n            function validateResetToken() {\n                const { token } = body();\n                const user = users.find(x =>\n                    !!x.resetToken && x.resetToken === token &&\n                    new Date() < new Date(x.resetTokenExpiry)\n                );\n\n                if (!user) return error('Invalid token');\n\n                return ok();\n            }\n\n            function resetPassword() {\n                const { token, password } = body();\n                const user = users.find(x =>\n                    !!x.resetToken && x.resetToken === token &&\n                    new Date() < new Date(x.resetTokenExpiry)\n                );\n\n                if (!user) return error('Invalid token');\n\n                // update password and remove reset token\n                user.password = password;\n                user.isVerified = true;\n                delete user.resetToken;\n                delete user.resetTokenExpiry;\n                localStorage.setItem('users', JSON.stringify(users));\n\n                return ok();\n            }\n\n            function getUsers() {\n                return ok(users);\n            }\n\n            function getUserById() {\n                if (!isAuthenticated()) return unauthorized();\n\n                let user = users.find(x => x.id === idFromUrl());\n\n                // users can get own profile and admins can get all profiles\n                if (user.id !== idFromToken()) {\n                    return unauthorized();\n                }\n\n                return ok(user);\n            }\n\n            function createUser() {\n                const user = body();\n                if (users.find(x => x.email === user.email)) {\n                    return error(`Email ${user.email} is already registered`);\n                }\n\n                // assign user id and a few other properties then save\n                user.id = newUserId();\n                user.dateCreated = new Date().toISOString();\n                user.isVerified = true;\n                delete user.confirmPassword;\n                users.push(user);\n                localStorage.setItem('users', JSON.stringify(users));\n\n                return ok();\n            }\n\n            function updateUser() {\n                if (!isAuthenticated()) return unauthorized();\n\n                let params = body();\n                let user = users.find(x => x.id === idFromUrl());\n\n                // users can update own profile and admins can update all profiles\n                if (user.id !== idFromToken()) {\n                    return unauthorized();\n                }\n\n                // only update password if included\n                if (!params.password) {\n                    delete params.password;\n                }\n                // don't save confirm password\n                delete params.confirmPassword;\n\n                // update and save user\n                Object.assign(user, params);\n                localStorage.setItem('users', JSON.stringify(users));\n\n                return ok({\n                    id: user.id,\n                    email: user.email,\n                    title: user.title,\n                    firstName: user.firstName,\n                    lastName: user.lastName,\n                    role: user.role\n                });\n            }\n\n            function deleteUser() {\n                if (!isAuthenticated()) return unauthorized();\n\n                let user = users.find(x => x.id === idFromUrl());\n\n                // users can delete own account and admins can delete any account\n                if (user.id !== idFromToken()) {\n                    return unauthorized();\n                }\n\n                // delete user then save\n                users = users.filter(x => x.id !== idFromUrl());\n                localStorage.setItem('users', JSON.stringify(users));\n                return ok();\n            }\n\n            // helper functions\n\n            function ok(body) {\n                resolve({ ok: true, text: () => Promise.resolve(JSON.stringify(body)) });\n            }\n\n            function unauthorized() {\n                resolve({ status: 401, text: () => Promise.resolve(JSON.stringify({ message: 'Unauthorized' })) });\n            }\n\n            function error(message) {\n                resolve({ status: 400, text: () => Promise.resolve(JSON.stringify({ message })) });\n            }\n\n            function isAuthenticated() {\n                return (opts.headers['Authorization'] || '').startsWith('Bearer fake-jwt-token');\n            }\n\n            function idFromUrl() {\n                const urlParts = url.split('/');\n                return parseInt(urlParts[urlParts.length - 1]);\n            }\n\n            function idFromToken() {\n                return parseInt(opts.headers['Authorization'].split('.')[2]);\n            }\n\n            function body() {\n                return opts.body && JSON.parse(opts.body);\n            }\n\n            function newUserId() {\n                return users.length ? Math.max(...users.map(x => x.id)) + 1 : 1;\n            }\n        });\n    }\n}"]},"metadata":{},"sourceType":"module"}