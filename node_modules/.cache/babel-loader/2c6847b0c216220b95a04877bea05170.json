{"ast":null,"code":"var _jsxFileName = \"/Users/z0041gm/school/DigitalSkillsAssessment/src/util/PasswordReset/_components/Alert.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { alertService, AlertType } from '../_services';\nimport { history } from '../_helpers';\nconst propTypes = {\n  id: PropTypes.string,\n  fade: PropTypes.bool\n};\nconst defaultProps = {\n  id: 'default-alert',\n  fade: true\n};\n\nfunction Alert({\n  id,\n  fade\n}) {\n  const [alerts, setAlerts] = useState([]);\n  useEffect(() => {\n    // subscribe to new alert notifications\n    const subscription = alertService.onAlert(id).subscribe(alert => {\n      // clear alerts when an empty alert is received\n      if (!alert.message) {\n        setAlerts(alerts => {\n          // filter out alerts without 'keepAfterRouteChange' flag\n          const filteredAlerts = alerts.filter(x => x.keepAfterRouteChange); // remove 'keepAfterRouteChange' flag on the rest\n\n          filteredAlerts.forEach(x => delete x.keepAfterRouteChange);\n          return filteredAlerts;\n        });\n      } else {\n        // add alert to array\n        setAlerts(alerts => [...alerts, alert]); // auto close alert if required\n\n        if (alert.autoClose) {\n          setTimeout(() => removeAlert(alert), 3000);\n        }\n      }\n    }); // clear alerts on location change\n\n    const historyUnlisten = history.listen(({\n      pathname\n    }) => {\n      // don't clear if pathname has trailing slash because this will be auto redirected again\n      if (pathname.endsWith('/')) return;\n      alertService.clear(id);\n    }); // clean up function that runs when the component unmounts\n\n    return () => {\n      // unsubscribe & unlisten to avoid memory leaks\n      subscription.unsubscribe();\n      historyUnlisten();\n    };\n  }, []);\n\n  function removeAlert(alert) {\n    if (fade) {\n      // fade out alert\n      const alertWithFade = { ...alert,\n        fade: true\n      };\n      setAlerts(alerts => alerts.map(x => x === alert ? alertWithFade : x)); // remove alert after faded out\n\n      setTimeout(() => {\n        setAlerts(alerts => alerts.filter(x => x !== alertWithFade));\n      }, 250);\n    } else {\n      // remove alert\n      setAlerts(alerts => alerts.filter(x => x !== alert));\n    }\n  }\n\n  function cssClasses(alert) {\n    if (!alert) return;\n    const classes = ['alert', 'alert-dismissable'];\n    const alertTypeClass = {\n      [AlertType.Success]: 'alert alert-success',\n      [AlertType.Error]: 'alert alert-danger',\n      [AlertType.Info]: 'alert alert-info',\n      [AlertType.Warning]: 'alert alert-warning'\n    };\n    classes.push(alertTypeClass[alert.type]);\n\n    if (alert.fade) {\n      classes.push('fade');\n    }\n\n    return classes.join(' ');\n  }\n\n  if (!alerts.length) return null;\n  return React.createElement(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      width: '80%',\n      margin: 'auto'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, alerts.map((alert, index) => React.createElement(\"div\", {\n    key: index,\n    className: cssClasses(alert),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    className: \"close\",\n    onClick: () => removeAlert(alert),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, \"\\xD7\"), React.createElement(\"span\", {\n    dangerouslySetInnerHTML: {\n      __html: alert.message\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  })))));\n}\n\nAlert.propTypes = propTypes;\nAlert.defaultProps = defaultProps;\nexport { Alert };","map":{"version":3,"sources":["/Users/z0041gm/school/DigitalSkillsAssessment/src/util/PasswordReset/_components/Alert.js"],"names":["React","useState","useEffect","PropTypes","alertService","AlertType","history","propTypes","id","string","fade","bool","defaultProps","Alert","alerts","setAlerts","subscription","onAlert","subscribe","alert","message","filteredAlerts","filter","x","keepAfterRouteChange","forEach","autoClose","setTimeout","removeAlert","historyUnlisten","listen","pathname","endsWith","clear","unsubscribe","alertWithFade","map","cssClasses","classes","alertTypeClass","Success","Error","Info","Warning","push","type","join","length","width","margin","index","__html"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { alertService, AlertType } from '../_services';\nimport { history } from '../_helpers';\n\nconst propTypes = {\n    id: PropTypes.string,\n    fade: PropTypes.bool\n};\n\nconst defaultProps = {\n    id: 'default-alert',\n    fade: true\n};\n\nfunction Alert({ id, fade }) {\n    const [alerts, setAlerts] = useState([]);\n\n    useEffect(() => {\n        // subscribe to new alert notifications\n        const subscription = alertService.onAlert(id)\n            .subscribe(alert => {\n                // clear alerts when an empty alert is received\n                if (!alert.message) {\n                    setAlerts(alerts => {\n                        // filter out alerts without 'keepAfterRouteChange' flag\n                        const filteredAlerts = alerts.filter(x => x.keepAfterRouteChange);\n\n                        // remove 'keepAfterRouteChange' flag on the rest\n                        filteredAlerts.forEach(x => delete x.keepAfterRouteChange);\n                        return filteredAlerts;\n                    });\n                } else {\n                    // add alert to array\n                    setAlerts(alerts => ([...alerts, alert]));\n\n                    // auto close alert if required\n                    if (alert.autoClose) {\n                        setTimeout(() => removeAlert(alert), 3000);\n                    }\n                }\n            });\n\n        // clear alerts on location change\n        const historyUnlisten = history.listen(({ pathname }) => {\n            // don't clear if pathname has trailing slash because this will be auto redirected again\n            if (pathname.endsWith('/')) return;\n\n            alertService.clear(id);\n        });\n\n        // clean up function that runs when the component unmounts\n        return () => {\n            // unsubscribe & unlisten to avoid memory leaks\n            subscription.unsubscribe();\n            historyUnlisten();\n        };\n    }, []);\n\n    function removeAlert(alert) {\n        if (fade) {\n            // fade out alert\n            const alertWithFade = { ...alert, fade: true };\n            setAlerts(alerts => alerts.map(x => x === alert ? alertWithFade : x));\n\n            // remove alert after faded out\n            setTimeout(() => {\n                setAlerts(alerts => alerts.filter(x => x !== alertWithFade));\n            }, 250);\n        } else {\n            // remove alert\n            setAlerts(alerts => alerts.filter(x => x !== alert));\n        }\n    }\n\n    function cssClasses(alert) {\n        if (!alert) return;\n\n        const classes = ['alert', 'alert-dismissable'];\n\n        const alertTypeClass = {\n            [AlertType.Success]: 'alert alert-success',\n            [AlertType.Error]: 'alert alert-danger',\n            [AlertType.Info]: 'alert alert-info',\n            [AlertType.Warning]: 'alert alert-warning'\n        }\n\n        classes.push(alertTypeClass[alert.type]);\n\n        if (alert.fade) {\n            classes.push('fade');\n        }\n\n        return classes.join(' ');\n    }\n\n    if (!alerts.length) return null;\n\n    return (\n        <div className=\"\">\n            <div style={{ width: '80%', margin: 'auto' }}>\n                {alerts.map((alert, index) =>\n                    <div key={index} className={cssClasses(alert)}>\n                        <a className=\"close\" onClick={() => removeAlert(alert)}>&times;</a>\n                        <span dangerouslySetInnerHTML={{__html: alert.message}}></span>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n\nAlert.propTypes = propTypes;\nAlert.defaultProps = defaultProps;\nexport { Alert };"]},"metadata":{},"sourceType":"module"}